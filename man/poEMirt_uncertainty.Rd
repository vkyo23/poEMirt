% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/poEMirt_uncertainty.R
\name{poEMirt_uncertainty}
\alias{poEMirt_uncertainty}
\title{Estimating statistical uncertainty for poEMirt models}
\usage{
poEMirt_uncertainty(
  fit,
  method = c("bootstrap", "gibbs"),
  seed = NULL,
  iter = 100,
  control = NULL
)
}
\arguments{
\item{fit}{A \code{poEMirtFit} object from \code{poEMirt()}.}

\item{method}{A character. This must be "bootstrap" or "gibbs".}

\item{seed}{An integer. Random seed if needed.}

\item{iter}{An integer. The number of iterations. Default is 100.}

\item{control}{A list of model controls. This can include following elements.
\itemize{
  \item \code{save_item_parameters} A bool. If TRUE, the function keeps item parameters. Default is TRUE.
  \item \code{verbose} An integer of verbose. Default is NULL.
  \item \code{thread} An integer of threads (only for Bootstrap). Default is 1. Status messages will not be printed if \code{thread} > 1.
  \item \code{warmup} An integer (only for Gibbs). The number of warmup iterations for Gibbs sampling. Default is 100.
  \item \code{thin} An integer of thinning for Gibbs sampling (only for Gibbs). Default is 1.
  \item \code{PG_approx} A bool (only Gibbs). If TRUE, approximated Polya-Gamma random draws are used. This approximation accelerates the implementation but is not recommended for small n (e.g., n < 10). Default is FALSE.
}}
}
\value{
A \code{poEMirtBoot} / \code{poEMirtGibbs} object containing:
\describe{
  \item{parameter}{A list of parameters}
  \item{standard_deviation}{A list of standard deviations of parameters}
  \item{input}{A list of model input}
}
}
\description{
This function computes statistical uncertainty using bootstrap or Gibbs sampling.
}
\examples{
\dontrun{
data("sim_data_dynamic")

# Convert into poEMirt-readable data
data <- read_poEMirt(
  data = sim_data_dynamic,
  responses = paste0('y', 1:5),
  i = "i",
  j = "j",
  t = "t"
)

# Fit the model
fit <- poEMirt(
  data = data,
  model = "dynamic",
  control = list(
    verbose = 10,
    constrant = 1
  )
)

# Bootstrap
fit_boot <- poEMirt_uncertainty(
  fit = fit,
  method = "bootstrap",
  seed = 1,
  iter = 100,
  control = list(
    verbose = 10
  )
)
summary(fit_boot, parameter = "theta", ci = 0.95)

# Gibbs
fit_gibbs <- poEMirt_uncertainty(
  fit = fit,
  method = "gibbs",
  seed = 1,
  iter = 500,
  control = list(
    verbose = 50,
    PG_approx = TRUE, 
    warmup = 100,
    thin = 5
  )
)
summary(fit_gibbs, parameter = "theta", ci = 0.95)
}
}
